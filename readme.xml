<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<article lang="">
  <sect1>
    <title><anchor id="image-classification-for-a-city-dog-show"/>Image Classification for a City Dog Show</title>
    <sect2>
      <title><anchor id="project-goal"/>Project Goal</title>
      <orderedlist>
        <listitem>
          <para>Improving your <emphasis>programming</emphasis> skills using Python. </para>
        </listitem>
      </orderedlist>
      <para>In this project, you will use a <emphasis>created</emphasis> image classifier to identify dog breeds. We ask you to focus on <emphasis>Python</emphasis> and not on the actual classifier.</para>
    </sect2>
    <sect2><title><anchor id="description-"/>Description:</title>Description<para>Your city is hosting a citywide dog show and you have volunteered to help the organizing committee with contestant registration. Every participant that registers must submit an image of their dog along with biographical information about their dog. The registration system tags the images based upon the biographical information. </para><para>Some people are planning on registering pets that arenâ€™t actual dogs.</para><para>You need to use an already developed Python classifier to make sure the participants are dogs.</para><para>Note, you DO NOT need to create the classifier. It will be provided to you. You will need to apply the Python tools you just learned to USE the classifier.</para></sect2>
    <sect2><title><anchor id="-your-tasks-"/>Your Tasks:</title>Your Tasks:<orderedlist><listitem><para>Using your Python skills, you will determine which image classification algorithm works the "best" on classifying images as "dogs" or "<emphasis>not</emphasis> dogs". </para></listitem><listitem><para>Determine how well the "best" classification algorithm works on correctly identifying a dog's breed. If you are confused by the term <emphasis>image classifier</emphasis> look at it simply as a tool that has an input and an output. The Input is an image. The output determines what the image depicts. (for example, a dog). Be mindful of the fact that image classifiers do not always categorize the images correctly. </para></listitem><listitem><para>Time how long each algorithm takes to solve the classification problem. With computational tasks, there is often a trade-off between accuracy and runtime. The more accurate an algorithm, the higher the likelihood that it will take more time to run and use more computational resources to run. </para></listitem></orderedlist><para>For further clarifications, please check our <ulink url="https://github.com/udacity/AIPND-revision/blob/master/notes/project_intro-to-python.md">FAQs</ulink> here.</para></sect2>
    <sect2><title><anchor id="important-notes-"/>Important Notes:</title>Important Notes:<para>For this image classification task, you will be using an image classification application using a deep learning model called a convolutional neural network (often abbreviated as CNN). CNNs work particularly well for detecting features in images like colors, textures, and edges; then using these features to identify objects in the images. You'll use a CNN that has already <emphasis>learned</emphasis> the features from a giant dataset of 1.2 million images called <ulink url="http://www.image-net.org/">ImageNet</ulink>. There are different types of CNNs that have different structures (architectures) that work better or worse depending on your criteria. With this project, you'll explore the three different architectures (AlexNet, VGG, and ResNet) and determine which is best for your application. </para><para>We have provided you with a <emphasis>classifier function</emphasis> in classifier.py that will allow you to use these CNNs to classify your images. The test_classifier.py file contains an example program that demonstrates how to use the <emphasis>classifier function</emphasis>. For this project, you will be focusing on using your Python skills to complete these tasks using the <emphasis>classifier function.</emphasis></para><para>Remember that certain breeds of dogs look very similar. The more images of two similar-looking dog breeds that the algorithm has <emphasis>learned</emphasis> from, the more likely the algorithm will be able to distinguish between those two breeds. We have found the following breeds to look very similar: <ulink url="https://www.google.com/search?q=Great+Pyrenees&amp;source=lnms&amp;tbm=isch&amp;sa=X&amp;ved=0ahUKEwje252-kpfZAhVF3FMKHeXwB3IQ_AUICigB&amp;biw=1112&amp;bih=1069">Great Pyrenees</ulink> and <ulink url="https://www.google.com/search?tbm=isch&amp;q=Kuvasz&amp;spell=1&amp;sa=X&amp;ved=0ahUKEwi9_9fTkpfZAhWB7FMKHXlKDWoQBQg6KAA&amp;biw=1112&amp;bih=1069&amp;dpr=1">Kuvasz</ulink>, <ulink url="https://www.google.com/search?biw=1112&amp;bih=1069&amp;tbm=isch&amp;sa=1&amp;ei=d7F8WpaaMc_VzgLW8LvABw&amp;q=German+Shepherd&amp;oq=German+Shepherd&amp;gs_l=psy-ab.3..0i67k1j0l2j0i67k1j0l6.31751.41069.0.41515.29.18.4.7.9.0.131.1164.14j2.17.0....0...1c.1.64.psy-ab..2.26.1140.0..0i10k1j0i13k1.112.xUB8_AoVF9w">German Shepherd</ulink> and <ulink url="https://www.google.com/search?biw=1112&amp;bih=1069&amp;tbm=isch&amp;sa=1&amp;ei=orF8WtHWDcOdzwLnyLXgBw&amp;q=Malinois&amp;oq=Malinois&amp;gs_l=psy-ab.3..0l3j0i67k1l3j0l2j0i67k1j0.31864.42125.0.42493.23.20.0.1.1.0.132.1460.14j4.19.0....0...1c.1.64.psy-ab..8.14.926.0...75.U5aOu6JZ9Vk">Malinois</ulink>, <ulink url="https://www.google.com/search?biw=1112&amp;bih=1069&amp;tbm=isch&amp;sa=1&amp;ei=zbF8WqTiHZDxzgKlm5SYBw&amp;q=Beagle&amp;oq=Beagle&amp;gs_l=psy-ab.3..0i67k1j0l2j0i67k1l2j0l5.29396.33482.0.34041.12.8.3.1.1.0.126.585.6j2.8.0....0...1c.1.64.psy-ab..0.12.609...0i10k1.0.Dr92CW2Kqqo">Beagle</ulink> and <ulink url="https://www.google.com/search?biw=1112&amp;bih=1069&amp;tbm=isch&amp;sa=1&amp;ei=8LF8WteAGND0zgKvlL-IBw&amp;q=Walker+hound&amp;oq=Walker+hound&amp;gs_l=psy-ab.3..0l10.20697.23454.0.23773.12.10.0.2.2.0.81.601.10.10.0....0...1c.1.64.psy-ab..0.12.610...0i67k1.0.GI0QxI1sadY">Walker Hound</ulink>, amongst others.</para><para/></sect2>
  </sect1>
  <sect1><title><anchor id="project-instructions"/>Project Instructions</title>Project Instructions<sect2><title><anchor id="principal-objectives"/>Principal Objectives</title>Principal Objectives<orderedlist><listitem><para>Correctly identify which pet images are of dogs (even if the breed is misclassified) and which pet images aren't of dogs.</para></listitem><listitem><para>Correctly classify the breed of dog, for the images that are of dogs.</para></listitem><listitem><para>Determine which CNN model architecture (ResNet, AlexNet, or VGG), "best" achieve objectives <emphasis>1</emphasis> and <emphasis>2</emphasis>.</para></listitem><listitem><para>Consider the <emphasis>time</emphasis> resources required to best achieve objectives <emphasis>1</emphasis> and <emphasis>2</emphasis>, and determine if an alternative solution would have given a "<emphasis>good enough</emphasis>" result, given the amount of time each of the algorithms takes to run.</para></listitem></orderedlist></sect2><sect2><title><anchor id="todo-"/>TODO:</title>TODO:<sect3><title><anchor id="edit-program-check_images-py"/>Edit program <emphasis>check_images.py</emphasis></title><emphasis>check_images.py</emphasis><para>The <emphasis>check_images.py</emphasis> is the program file that you will be editing to achieve the four objectives above. This file contains a main() function that outlines how to complete this program through using functions that have <emphasis>not</emphasis> yet been defined. You will be creating these <emphasis>undefined</emphasis> functions in check_images.py to achieve the objectives above. </para><para>All of the TODOs are listed in check_images.py. You will find further elaborations and explanations for each, in the following concepts of this project.</para></sect3></sect2><sect2><title><anchor id="if-you-feel-that-you-need-more-guidance-please-refer-to-the-files-ending-with_hints-py-in-the-workspace-you-will-find-a-hint-file-for-each-of-the-tasks-"/>If you feel that you need more guidance, please refer to the files ending with_hints.py. In the workspace, you will find a hint file for each of the tasks.</title>_hints.py<sect3><title><anchor id="important-notes-1"/>Important notes:</title>Important notes:<orderedlist><listitem><para>The Project Workspace is set up with the programs and files (like pet_images folder) you will need to complete the project. </para></listitem><listitem><para>The Python comments that begin with <emphasis># TODO:</emphasis> in the check_images.py program indicates where you will need to change the code of the program. The comments in check_images.py will help you make the changes needed. </para></listitem><listitem><para>Function docstrings contain input <emphasis>parameters</emphasis> and <emphasis>return values</emphasis>, which were left to provide guidance. You are welcome to program these functions differently. </para></listitem><listitem><para>In 6. Timing Code to 19. Printing Results we will provide additional guidance for programming the <emphasis>undefined</emphasis> functions and completing the check_images.py program. This information has been provided to help you through the process. The information provides:</para></listitem><listitem><para>You can use the functions within the program <ulink url="https://github.com/udacity/AIPND-revision/blob/master/intropyproject-classify-pet-images/print_functions_for_lab_checks.py">print_functions_for_lab_checks.py</ulink> to check your code for sections 8. Command Line Arguments through 17. Calculating Results. You will find this program within the Project Workspace. </para></listitem></orderedlist></sect3></sect2><sect2><title><anchor id="program-outline"/>Program Outline</title><orderedlist><listitem><para>Time your program</para></listitem><listitem><para>Get program Inputs from the user</para></listitem><listitem><para>Create Pet Images Labels</para></listitem><listitem><para>Create Classifier Labels and Compare Labels</para></listitem><listitem><para>Classifying Labels as "Dogs" or "Not Dogs"</para></listitem><listitem><para>Calculate the Results</para></listitem><listitem><para>Print the Results </para></listitem></orderedlist><para>You will need to repeat these tasks for each of the three image classification algorithms that are provided to you.</para><para/></sect2></sect1>
  <sect1>
    <title><anchor id="results"/>Results</title>
    <para>In this section, we </para>
    <orderedlist>
      <listitem>
        <para>Provide the results from running the check_images.py for all <emphasis>three</emphasis> CNN model architectures </para>
      </listitem>
      <listitem>
        <para>Compare these results to the ones your program produced when you ran <emphasis>run_models_batch.sh</emphasis> (or <emphasis>run_models_batch_hints.sh</emphasis>) in the Printing Results section </para>
      </listitem>
      <listitem>
        <para>Discuss how the check_images.py addressed the four primary objectives of this Project </para>
      </listitem>
    </orderedlist>
    <sect2>
      <title/>
      <sect3>
        <title><anchor id="in-this-project-we-had-2-main-objectives-"/>In this project we had 2 main objectives:</title>
        <orderedlist>
          <listitem>
            <para>Identifying which pet images are of dogs and which pet images aren't of dogs </para>
          </listitem>
          <listitem>
            <para>Classifying the breeds of dogs, for the images that are of dogs </para>
          </listitem>
        </orderedlist>
        <para>Your program should have provided you with objectives <emphasis>1</emphasis> and <emphasis>2</emphasis> when it was run. In the table below, you will find our results for each of the model architectures. Your program should provide you with the same results as we have provided below.</para>
        <orderedlist>
          <listitem>
            <para>For objective 1, notice that both <emphasis>VGG</emphasis> and <emphasis>AlexNet</emphasis> correctly identify images of "dogs" and "not-a-dog" 100% of the time. </para>
          </listitem>
          <listitem>
            <para>For objective 2, <emphasis>VGG</emphasis> provides the best solution because it classifies the correct breed of dog over 90% of the time. </para>
          </listitem>
        </orderedlist>
      </sect3>
    </sect2>
    <sect2>
      <title><anchor id="results-table"/>Results Table</title>
      <para>
        <inlinegraphic fileref="embedded:Image1" width="5.3752inch" depth="2inch"/>
      </para>
      <para>Project Results </para>
      <para>Given our results, the "best" model architecture is <emphasis>VGG</emphasis>. It outperformed both of the other architectures when considering both objectives <emphasis>1</emphasis> and <emphasis>2</emphasis>. You will notice that <emphasis>ResNet</emphasis> did classify dog breeds better than <emphasis>AlexNet</emphasis>, but only <emphasis>VGG</emphasis> and <emphasis>AlexNet</emphasis> were able to classify "dogs" and "not-a-dog" at 100% accuracy. The model <emphasis>VGG</emphasis> was the one that was able to classify "dogs" and "not-a-dog" with 100% accuracy and had the best performance regarding breed classification with 93.3% accuracy.</para>
      <para>Use the next (last!) workspace to present and print your final results. You can use the table above as a reference.</para>
      <para/>
    </sect2>
  </sect1>
</article>
